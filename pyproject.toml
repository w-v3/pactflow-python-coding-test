################################################################################
## Project Configuration
################################################################################
[project]
name        = "pypacter"
description = "A simple Python project for Code Development checking."
dynamic     = ["version"]

authors     = [{ name = "w-v3", email = "vaibhav.official.0786@gmail.com" },]
maintainers = [{ name = "w-v3", email = "vaibhav.official.0786@gmail.com" },]

readme = "README.md"
license = { file = "LICENSE" }
keywords = ["pactflow", "pypacter","code reviewer"]

classifiers = [
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Developers",
  "License :: Other/Proprietary License",
  "Natural Language :: English",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "Topic :: Software Development :: Code Generators",
]

requires-python = ">=3.13"

dependencies = ["langchain_openai~=0.2.9", "langchain~=0.3.7", "pyyaml~=6.0"]

[project.urls]
Documentation = "https://github.com/pactflow/pactflow-python-coding-test"
Issues        = "https://github.com/pactflow/pactflow-python-coding-test/issues"
Source        = "https://github.com/pactflow/pactflow-python-coding-test"

[project.optional-dependencies]
devel-test = ["pytest", "pytest-cov", "coverage[toml]"]
devel-types = ["mypy==1.13.0", "pydantic~=2.9", "types-pyyaml", "types-pygments"]
devel = [
  "pypacter[devel-test,devel-types]",
  "pypacter-api[devel]",
  "ruff==0.8.2",
  "ipykernel",
]

################################################################################
## Build System Configuration
################################################################################
[build-system]
requires      = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[tool.hatch.version]
source = "vcs"

[tool.hatch.build.hooks.vcs]
version-file = "src/pypacter/__version__.py"

[tool.hatch.envs.default]
installer = "uv"
features = ["devel"]
# This is require to get around an incompatibility between hatch and uv
# See: https://github.com/pypa/hatch/issues/1639
pre-install-commands = ["uv pip install .[devel]"]

[tool.hatch.envs.default.scripts]
lint       = "ruff check --output-format full --show-fixes {args} src tests"
typecheck  = "mypy . {args}"
format     = "ruff format . {args}"
test       = "pytest tests/ {args}"
test-all   = "pytest tests/ pypacter-api/tests/ {args}"
all        = ["format", "lint", "typecheck", "test"]

[tool.hatch.envs.test]
installer = "uv"
features = ["devel"]
# This is require to get around an incompatibility between hatch and uv
# See: https://github.com/pypa/hatch/issues/1639
pre-install-commands = ["uv pip install .[devel-test]"]

################################################################################
## UV Configuration
################################################################################
[tool.uv.workspace]
members = ["pypacter-api"]

[tool.uv.sources]
pypacter     = { workspace = true }
pypacter-api = { workspace = true }

################################################################################
## Ruff Configuration
################################################################################

[tool.ruff]

[tool.ruff.lint]
select = ["ALL"]

ignore = [
  "A001",   # Forbid assigning built-ins
  "A002",   # Forbid shadowing built-ins
  "D200",   # Require single line docstrings to be on one line.
  "D203",   # Require blank line before class docstring
  "D212",   # Multi-line docstring summary must start at the first line
  "FIX002", # Forbid TODO in comments
  "RUF200", # Validate pyproject.toml (handled by Hatch)
  "TD002",  # Assign someone to 'TODO' comments

  # The following are disabled for compatibility with the formatter
  "COM812", # enforce trailing commas
  "ISC001", # require imports to be sorted
]

[tool.ruff.lint.isort]
known-first-party = ["pypacter", "pypacter_api"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"
banned-module-level-imports = [
  # Use Pydantic V2 instead
  "pydantic.v1",
]

[tool.ruff.lint.flake8-tidy-imports.banned-api]
"pydantic.v1".msg = "Use Pydantic V2 instead"

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
preview = true

################################################################################
## PyTest Configuration
################################################################################

[tool.pytest.ini_options]
addopts = [
  "--import-mode=importlib",
  "--cov-config=pyproject.toml",
  "--cov-report=xml"

]


################################################################################
## Mypy Configuration
################################################################################

[tool.mypy]
plugins = "pydantic.mypy"

################################################################################
## Coverage Configuration
################################################################################

[tool.coverage.paths]
pypacter = ["src/pypacter"]
tests    = ["tests"]

[tool.coverage.report]
exclude_lines = [
  "if __name__ == .__main__.:", # Ignore non-runnable code
  "if TYPE_CHECKING:",          # Ignore typing
  "raise NotImplementedError",  # Ignore defensive assertions
  "@(abc\\.)?abstractmethod",   # Ignore abstract methods
]

################################################################################
## Typos
################################################################################

[tool.typos.default]
extend-ignore-re = ["(?Rm)^.*(#|//)\\s*spellchecker:ignore$"]

################################################################################
## Yamlfix
################################################################################
[tool.yamlfix]
line_length = 100
whitelines = 1
section_whitelines = 1
sequence_style = "block_style"
