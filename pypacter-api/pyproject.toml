################################################################################
## Project Configuration
################################################################################
[project]
name        = "pypacter-api"
description = "API for PyPacter"
dynamic     = ["version"]

authors     = [{ name = "w-v3", email = "vaibhav.official.0786@gmail.com" }]
maintainers = [{ name = "w-v3", email = "vaibhav.official.0786@gmail.com" }]

readme = "README.md"
license = { file = "LICENSE" }
keywords = [
  "pactflow",
  "pypacter",
]
classifiers = [
  "Development Status :: 3 - Alpha",
  "Environment :: Console",
  "Framework :: FastAPI",
  "Intended Audience :: Developers",
  "License :: Other/Proprietary License",
  "Natural Language :: English",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: Implementation :: CPython",
  "Topic :: Software Development :: Code Generators",
]

requires-python = ">=3.13"

dependencies = [
  "fastapi~=0.0",
  "multidict~=6.0",
  "pypacter",
  "uvicorn",
  "python-dotenv"
]


[project.urls]
Documentation = "https://github.com/pactflow/pactflow-python-coding-test/tree/main/pypacter-api"
Issues        = "https://github.com/pactflow/pactflow-python-coding-test/issues"
Source        = "https://github.com/pactflow/pactflow-python-coding-test/tree/main/pypacter-api"

[project.scripts]
local-api = "pypacter_api:local"

[project.optional-dependencies]
devel-types = [
  "mypy==1.13.0",
  "pydantic~=2.9",
]
devel-test = ["pytest", "pytest-cov", "coverage[toml]", "uvicorn"]
devel = ["pypacter-api[devel-types,devel-test]", "ruff==0.8.2"]

################################################################################
## Build System Configuration
################################################################################
[build-system]
requires      = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[tool.hatch.version]
source = "vcs"
raw-options = { root = ".." }

[tool.hatch.build.hooks.vcs]
version-file = "src/pypacter_api/__version__.py"

[tool.hatch.envs.api]
installer = "uv"
features = ["devel"]
# This is require to get around an incompatibility between hatch and uv
# See: https://github.com/pypa/hatch/issues/1639
pre-install-commands = ["uv pip install .[devel]"]


[tool.hatch.envs.api.scripts]
lint       = "ruff check --output-format full --show-fixes {args} src tests"
typecheck  = "mypy . {args}"
format     = "ruff format . {args}"
test       = "pytest tests/ {args}"
all        = ["format", "lint", "typecheck", "test"]
#run        = python -m src/pypacter_api/__init__

[tool.hatch.envs.test]
installer = "uv"
features = ["devel"]
# This is require to get around an incompatibility between hatch and uv
# See: https://github.com/pypa/hatch/issues/1639
pre-install-commands = ["uv pip install .[devel-test]"]

################################################################################
## Ruff Configuration
################################################################################

[tool.ruff]
extend = "../pyproject.toml"

[tool.ruff.format]
preview = true

################################################################################
## PyTest Configuration
################################################################################

[tool.pytest.ini_options]
addopts = [
  "--import-mode=importlib",
  "--cov-config=pyproject.toml",
  "--cov-report=xml",
]

################################################################################
## Mypy Configuration
################################################################################

[tool.mypy]
plugins = "pydantic.mypy"

################################################################################
## Coverage Configuration
################################################################################

[tool.coverage.paths]
pypacter_api = ["src/pypacter_api"]
tests      = ["tests"]

[tool.coverage.report]
exclude_lines = [
  "if __name__ == .__main__.:", # Ignore non-runnable code
  "if TYPE_CHECKING:",          # Ignore typing
  "raise NotImplementedError",  # Ignore defensive assertions
  "@(abc\\.)?abstractmethod",   # Ignore abstract methods
]
